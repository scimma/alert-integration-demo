---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-classifier
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}-classifier
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-classifier
    spec:
      initContainers:
      ## Wait for database to be ready
      - name: check-db-ready
        image: busybox:1.31
        command: 
        - 'sh'
        - '-c'
        - 'echo -e "Checking for the availability of MariaDB Server deployment"; while ! nc -z {{ .Values.mariadb.fullnameOverride }} 3306; do sleep 1; printf "-"; done; echo -e "  >> MariaDB DB Server has started";'
      ## Apply database migrations
      - name: db-migration
        image: {{ .Values.classifier.image.repository }}:{{ .Values.classifier.image.tag }}
        imagePullPolicy: {{ .Values.classifier.image.imagePullPolicy }}
        args:
        - '/bin/bash'
        - '-c'
        - 'python init_results_table.py'
        env:
          {{- include "broker.backendEnv" . | nindent 10 }}
      containers:
      ## The classifier reads alerts from the database, processes them, and generates
      ## new alerts that it stores in the database.
      - name: classifier
        image: {{ .Values.classifier.image.repository }}:{{ .Values.classifier.image.tag }}
        imagePullPolicy: {{ .Values.classifier.image.imagePullPolicy }}
        args:
        - '/bin/bash'
        - '-c'
        - '{{ .Values.classifier.command }}'
        env:
          {{- include "broker.backendEnv" . | nindent 10 }}
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-source-data-ingest
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}-source-data-ingest
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-source-data-ingest
    spec:
      volumes:
      - name: copy-hop-auth
        configMap:
          name: {{ .Release.Name }}-copy-hop-auth
      - name: hop-auth
        secret:
          ## Use the mariadb existingSecret spec to avoid redundant specs
          secretName: {{ .Values.mariadb.auth.existingSecret | quote }}
      - name: hop-config
        emptyDir: {}
      initContainers:
      ## Wait for database to be ready
      - name: check-db-ready
        image: busybox:1.31
        command: 
        - 'sh'
        - '-c'
        - 'echo -e "Checking for the availability of MariaDB Server deployment"; while ! nc -z {{ .Values.mariadb.fullnameOverride }} 3306; do sleep 1; printf "-"; done; echo -e "  >> MariaDB DB Server has started";'
      ## Apply database migrations
      - name: db-migration
        image: {{ .Values.classifier.image.repository }}:{{ .Values.classifier.image.tag }}
        imagePullPolicy: {{ .Values.classifier.image.imagePullPolicy }}
        args:
        - '/bin/bash'
        - '-c'
        - 'python init_tables.py'
        env:
          {{- include "broker.backendEnv" . | nindent 10 }}
      ## The hop auth.toml file must be chmod to 0600
      - image: ubuntu:20.04
        name: init-hop-auth
        command:
        - /bin/bash
        - -c
        - bash /tmp/copy_auth.sh
        volumeMounts:
        - name: hop-config
          mountPath: /home/{{ .Values.securityContext.username }}/.config/hop
          readOnly: false
        - name: hop-auth
          mountPath: /tmp/auth.toml
          subPath: "auth.toml"
          readOnly: true
        - name: copy-hop-auth
          mountPath: /tmp/copy_auth.sh
          subPath: "copy_auth.sh"
          readOnly: true
      containers:
      ## The source data subscriber ingests alerts from the demo source alert hopskotch 
      ## topic into the broker database
      - name: source-data-ingest
        image: {{ .Values.classifier.image.repository }}:{{ .Values.classifier.image.tag }}
        imagePullPolicy: {{ .Values.classifier.image.imagePullPolicy }}
        args:
        - '/bin/bash'
        - '-c'
        - '{{ .Values.sourceDataIngest.command }}'
        volumeMounts:
        - name: hop-config
          mountPath: /home/{{ .Values.securityContext.username }}/.config/hop
          readOnly: false
        env:
          {{- include "broker.backendEnv" . | nindent 10 }}
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-broker-alert-publisher
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}-broker-alert-publisher
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-broker-alert-publisher
    spec:
      volumes:
      - name: copy-hop-auth
        configMap:
          name: {{ .Release.Name }}-copy-hop-auth
      - name: hop-auth
        secret:
          ## Use the mariadb existingSecret spec to avoid redundant specs
          secretName: {{ .Values.mariadb.auth.existingSecret | quote }}
      - name: hop-config
        emptyDir: {}
      initContainers:
      ## Wait for database to be ready
      - name: check-db-ready
        image: busybox:1.31
        command: 
        - 'sh'
        - '-c'
        - 'echo -e "Checking for the availability of MariaDB Server deployment"; while ! nc -z {{ .Values.mariadb.fullnameOverride }} 3306; do sleep 1; printf "-"; done; echo -e "  >> MariaDB DB Server has started";'
      ## The hop auth.toml file must be chmod to 0600
      - image: ubuntu:20.04
        name: init-hop-auth
        command:
        - /bin/bash
        - -c
        - bash /tmp/copy_auth.sh
        volumeMounts:
        - name: hop-config
          mountPath: /home/{{ .Values.securityContext.username }}/.config/hop
          readOnly: false
        - name: hop-auth
          mountPath: /tmp/auth.toml
          subPath: "auth.toml"
          readOnly: true
        - name: copy-hop-auth
          mountPath: /tmp/copy_auth.sh
          subPath: "copy_auth.sh"
          readOnly: true
      containers:
      ## The broker alert publisher polls the broker database for new alerts generated by the 
      ## classifier and publishes them to the broker's alert stream via hopskotch
      - name: broker-alert-publisher
        image: {{ .Values.classifier.image.repository }}:{{ .Values.classifier.image.tag }}
        imagePullPolicy: {{ .Values.classifier.image.imagePullPolicy }}
        command:
        - '/bin/bash'
        - '-c'
        - '{{ .Values.alertDataPublisher.command }}'
        volumeMounts:
        - name: hop-config
          mountPath: /home/{{ .Values.securityContext.username }}/.config/hop
          readOnly: false
        env:
          {{- include "broker.backendEnv" . | nindent 10 }}
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-source-data-publisher
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}-source-data-publisher
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-source-data-publisher
    spec:
      volumes:
      - name: copy-hop-auth
        configMap:
          name: {{ .Release.Name }}-copy-hop-auth
      - name: hop-auth
        secret:
          ## Use the mariadb existingSecret spec to avoid redundant specs
          secretName: {{ .Values.mariadb.auth.existingSecret | quote }}
      - name: hop-config
        emptyDir: {}
      initContainers:
      ## The hop auth.toml file must be chmod to 0600
      - image: ubuntu:20.04
        name: init-hop-auth
        command:
        - /bin/bash
        - -c
        - bash /tmp/copy_auth.sh
        volumeMounts:
        - name: hop-config
          mountPath: /home/{{ .Values.securityContext.username }}/.config/hop
          readOnly: false
        - name: hop-auth
          mountPath: /tmp/auth.toml
          subPath: "auth.toml"
          readOnly: true
        - name: copy-hop-auth
          mountPath: /tmp/copy_auth.sh
          subPath: "copy_auth.sh"
          readOnly: true
      containers:
      ## The source data publisher parses a set of demo data and publishes messages to a
      ## hopskotch topic, simulating an MMA alert source
      - name: source-data-publisher
        image: {{ .Values.classifier.image.repository }}:{{ .Values.classifier.image.tag }}
        imagePullPolicy: {{ .Values.classifier.image.imagePullPolicy }}
        command:
        - '/bin/bash'
        - '-c'
        - '{{ .Values.sourceDataPublisher.command }}'
        volumeMounts:
        - name: hop-config
          mountPath: /home/{{ .Values.securityContext.username }}/.config/hop
          readOnly: false
